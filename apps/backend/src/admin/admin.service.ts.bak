import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ConfigService } from '@nestjs/config';
import * as bcrypt from 'bcrypt';
import { User, UserRole, UserStatus } from '../users/entities/user.entity';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { UpdateUserRoleDto } from './dto/update-user-role.dto';
import { CashIn } from './entities/cash-in.entity';
import { CoinIn } from './entities/coin-in.entity';

@Injectable()
export class AdminService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    @InjectRepository(CashIn)
    private readonly cashInRepository: Repository<CashIn>,
    @InjectRepository(CoinIn)
    private readonly coinInRepository: Repository<CoinIn>,
    private readonly configService: ConfigService,
  ) {}

  async getAllUsers(): Promise<User[]> {
    return this.userRepository.find({
      select: [
        'id',
        'email',
        'mobileNumber',
        'firstName',
        'lastName',
        'status',
        'role',
        'walletBalance',
        'loyaltyTier',
        'loyaltyPoints',
        'lastLoginAt',
        'isMobileVerified',
        'isEmailVerified',
        'createdAt',
        'updatedAt',
      ],
    });
  }

  async getUser(id: number): Promise<User> {
    const user = await this.userRepository.findOne({
      where: { id },
      select: [
        'id',
        'email',
        'mobileNumber',
        'firstName',
        'lastName',
        'status',
        'role',
        'walletBalance',
        'loyaltyTier',
        'loyaltyPoints',
        'lastLoginAt',
        'isMobileVerified',
        'isEmailVerified',
        'createdAt',
        'updatedAt',
        'address',
        'dateOfBirth',
      ],
    });

    if (!user) {
      throw new NotFoundException(`User with ID ${id} not found`);
    }
    return user;
  }

  async createUser(createUserDto: CreateUserDto): Promise<User> {
    const user = this.userRepository.create(createUserDto);
    if (createUserDto.password) {
      user.password = await bcrypt.hash(createUserDto.password, 10);
    }
    return this.userRepository.save(user);
  }

  async updateUser(id: number, updateUserDto: UpdateUserDto): Promise<User> {
    const user = await this.getUser(id);

    if (updateUserDto.password) {
      updateUserDto.password = await bcrypt.hash(updateUserDto.password, 10);
    }

    Object.assign(user, updateUserDto);
    return this.userRepository.save(user);
  }

  async deleteUser(id: number): Promise<void> {
    const user = await this.getUser(id);
    await this.userRepository.remove(user);
  }

  async updateUserRole(
    updateUserRoleDto: UpdateUserRoleDto,
    adminRole: UserRole,
  ): Promise<User> {
    const user = await this.userRepository.findOne({
      where: { id: updateUserRoleDto.userId },
    });

    if (!user) {
      throw new NotFoundException(
        `User with ID ${updateUserRoleDto.userId} not found`,
      );
    }

    // Check role hierarchy
    if (!this.canUpdateRole(adminRole, user.role, updateUserRoleDto.role)) {
      throw new ForbiddenException(
        'You do not have permission to update to this role',
      );
    }

    user.role = updateUserRoleDto.role;
    return this.userRepository.save(user);
  }

  async getUsersByRole(role: UserRole): Promise<User[]> {
    return this.userRepository.find({
      where: { role },
      select: [
        'id',
        'email',
        'mobileNumber',
        'firstName',
        'lastName',
        'status',
        'role',
        'walletBalance',
        'loyaltyTier',
        'loyaltyPoints',
        'lastLoginAt',
      ],
    });
  }

  private canUpdateRole(
    adminRole: UserRole,
    currentRole: UserRole,
    newRole: UserRole,
  ): boolean {
    const roleHierarchy = {
      [UserRole.SUPER_ADMIN]: 4,
      [UserRole.ADMIN]: 3,
      [UserRole.FINANCE_ADMIN]: 2,
      [UserRole.LOYALTY_MANAGER]: 2,
      [UserRole.USER]: 1,
    };

    const adminLevel = roleHierarchy[adminRole];
    const currentLevel = roleHierarchy[currentRole];
    const newLevel = roleHierarchy[newRole];

    // Admin can only update roles of lower level
    return adminLevel > currentLevel && adminLevel > newLevel;
  }

  async getOtpSettings() {
    return {
      expiryMinutes: this.configService.get<number>('otpExpiryMinutes'),
      maxAttempts: this.configService.get<number>('maxOtpAttempts'),
    };
  }

  async updateOtpSettings(config: OtpConfigDto) {
    if (config.expiryMinutes) {
      process.env.OTP_EXPIRY_MINUTES = config.expiryMinutes.toString();
    }
    if (config.maxAttempts) {
      process.env.MAX_OTP_ATTEMPTS = config.maxAttempts.toString();
    }
    return this.getOtpSettings();
  }

  async revokeUserOtp(userId: number): Promise<void> {
    const user = await this.userRepository.findOne({
      where: { id: userId },
    });

    if (!user) {
      throw new NotFoundException(`User with ID ${userId} not found`);
    }

    await this.otpService.clearOtp(user);
  }

  async getPendingOtps() {
    const users = await this.userRepository.find({
      where: {
        currentOtp: Not(IsNull()),
        otpExpiresAt: MoreThan(new Date()),
      },
      select: ['id', 'mobileNumber', 'otpExpiresAt', 'otpAttempts'],
    });

    return users.map((user) => ({
      userId: user.id,
      mobileNumber: user.mobileNumber,
      expiresAt: user.otpExpiresAt,
      attempts: user.otpAttempts,
    }));
  }

  async createSecurityLog(
    userId: number,
    type: SecurityLogType,
    action: string,
    metadata?: Record<string, any>,
    ipAddress?: string,
    userAgent?: string,
  ): Promise<SecurityLog> {
    const log = this.securityLogRepository.create({
      userId,
      type,
      action,
      metadata,
      ipAddress,
      userAgent,
    });
    return this.securityLogRepository.save(log);
  }

  async getSecurityLogs(query: QuerySecurityLogsDto): Promise<SecurityLog[]> {
    const queryBuilder = this.securityLogRepository.createQueryBuilder('log');

    if (query.type) {
      queryBuilder.andWhere('log.type = :type', { type: query.type });
    }

    if (query.userId) {
      queryBuilder.andWhere('log.userId = :userId', { userId: query.userId });
    }

    if (query.startDate) {
      queryBuilder.andWhere('log.createdAt >= :startDate', {
        startDate: query.startDate,
      });
    }

    if (query.endDate) {
      queryBuilder.andWhere('log.createdAt <= :endDate', {
        endDate: query.endDate,
      });
    }

    queryBuilder.orderBy('log.createdAt', 'DESC');

    return queryBuilder.getMany();
  }

  async getSecurityLogsByType(type: SecurityLogType): Promise<SecurityLog[]> {
    return this.securityLogRepository.find({
      where: { type },
      order: { createdAt: 'DESC' },
    });
  }

  async getSecurityLogsByUser(userId: number): Promise<SecurityLog[]> {
    return this.securityLogRepository.find({
      where: { userId },
      order: { createdAt: 'DESC' },
    });
  }

  // Transaction Management Methods
  async getTransactionOverview(): Promise<any> {
    // TODO: Implement transaction overview logic
    return {
      totalTransactions: 0,
      totalVolume: 0,
      averageTransaction: 0,
      recentTransactions: [],
    };
  }

  async getTransactionStats(startDate: Date, endDate: Date): Promise<any> {
    // TODO: Implement transaction statistics logic
    return {
      dailyVolume: [],
      transactionTypes: {
        topup: 0,
        withdrawal: 0,
        transfer: 0,
      },
      successRate: 0,
    };
  }

  // Loyalty Program Management Methods
  async getLoyaltyProgramSettings(): Promise<any> {
    // TODO: Implement loyalty settings retrieval
    return {
      tiers: [
        {
          name: 'Bronze',
          pointThreshold: 0,
          benefits: [],
        },
        {
          name: 'Silver',
          pointThreshold: 1000,
          benefits: [],
        },
        {
          name: 'Gold',
          pointThreshold: 5000,
          benefits: [],
        },
      ],
      pointsPerPeso: 1,
      expiryDays: 365,
    };
  }

  async updateLoyaltyProgramSettings(settings: any): Promise<any> {
    // TODO: Implement loyalty settings update
    return {
      success: true,
      message: 'Loyalty program settings updated successfully',
      settings,
    };
  }

  async getLoyaltyMetrics(): Promise<any> {
    // TODO: Implement loyalty metrics retrieval
    return {
      totalActiveMembers: 0,
      tierDistribution: {
        Bronze: 0,
        Silver: 0,
        Gold: 0,
      },
      totalPointsIssued: 0,
      totalPointsRedeemed: 0,
    };
  }

  async getPlayers() {
    return this.userRepository.find({
      where: { role: UserRole.USER },
      order: { createdAt: 'DESC' },
    });
  }

  async searchPlayers(query: string) {
    if (!query) return this.getPlayers();

    return this.userRepository
      .createQueryBuilder('user')
      .where('user.role = :role', { role: UserRole.USER })
      .andWhere(
        '(LOWER(user.firstName) LIKE LOWER(:query) OR ' +
          'LOWER(user.lastName) LIKE LOWER(:query) OR ' +
          'LOWER(user.email) LIKE LOWER(:query) OR ' +
          'user.mobileNumber LIKE :query)',
        { query: `%${query}%` },
      )
      .orderBy('user.createdAt', 'DESC')
      .getMany();
  }

  async getPlayer(id: number) {
    const player = await this.userRepository.findOne({
      where: { id, role: UserRole.USER },
    });

    if (!player) {
      throw new NotFoundException(`Player with ID ${id} not found`);
    }

    return player;
  }

  // Cash-in Management Methods
  async getCashIns() {
    return this.cashInRepository.find({
      relations: ['user'],
      order: { timestamp: 'DESC' },
    });
  }

  async searchCashIns(query: string) {
    if (!query) return this.getCashIns();

    return this.cashInRepository
      .createQueryBuilder('cashIn')
      .leftJoinAndSelect('cashIn.user', 'user')
      .where('user.firstName LIKE :query', { query: `%${query}%` })
      .orWhere('user.lastName LIKE :query', { query: `%${query}%` })
      .orWhere('user.mobileNumber LIKE :query', { query: `%${query}%` })
      .orWhere('cashIn.referenceId LIKE :query', { query: `%${query}%` })
      .orderBy('cashIn.timestamp', 'DESC')
      .getMany();
  }

  async getCashIn(id: string) {
    const cashIn = await this.cashInRepository.findOne({
      where: { id },
      relations: ['user'],
    });

    if (!cashIn) {
      throw new NotFoundException(`Cash-in with ID ${id} not found`);
    }

    return cashIn;
  }

  async findAllCoinIns({
    page = 1,
    limit = 10,
    search,
    fromDate,
    toDate,
    machineId,
    gameType,
  }) {
    const query = this.coinInRepository
      .createQueryBuilder('coinIn')
      .leftJoinAndSelect('coinIn.user', 'user')
      .leftJoinAndSelect('coinIn.machine', 'machine');

    if (search) {
      query.andWhere(
        '(user.username LIKE :search OR machine.name LIKE :search)',
        {
          search: `%${search}%`,
        },
      );
    }

    if (fromDate && toDate) {
      query.andWhere('coinIn.timestamp BETWEEN :fromDate AND :toDate', {
        fromDate,
        toDate,
      });
    }

    if (machineId) {
      query.andWhere('coinIn.machineId = :machineId', { machineId });
    }

    if (gameType) {
      query.andWhere('coinIn.gameType = :gameType', { gameType });
    }

    const [items, total] = await query
      .skip((page - 1) * limit)
      .take(limit)
      .orderBy('coinIn.timestamp', 'DESC')
      .getManyAndCount();

    return {
      items,
      meta: {
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit),
      },
    };
  }

  async findOneCoinIn(id: string) {
    return this.coinInRepository.findOne({
      where: { id },
      relations: ['user', 'machine'],
    });
  }
}
